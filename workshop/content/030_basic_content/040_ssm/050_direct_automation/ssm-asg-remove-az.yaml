---
description: Terminate all instances of ASG in a particular AZ
schemaVersion: '0.3'
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AvailabilityZone:
    type: String
    description: "(Required) The Availability Zone to impact"
  AutoscalingGroupName:
    type: String
    description: "(Required) The name of the autoscaling group"
  AutomationAssumeRole:
    type: String
    description: "The ARN of the role that allows Automation to perform
      the actions on your behalf."
  Duration:
    type: String
    description: (Optional) The duration of the attack in minutes (default=5)
    default: '5'
mainSteps:

# ---------------------------------------------------------------
# Query subnets attached to ASG. We will later match these to AZs
# for detaching and re-attaching operations
- name: DescribeAutoscaling
  action: aws:executeAwsApi
  onFailure: 'step:ExitList'
  onCancel: 'step:ExitList'
  timeoutSeconds: 60
  inputs:
    Service: autoscaling
    Api: DescribeAutoScalingGroups
    AutoScalingGroupNames:
        - "{{ AutoscalingGroupName }}"
  outputs:
    - Name: VPCZoneIdentifier
      Selector: "$.AutoScalingGroups[0].VPCZoneIdentifier"
      Type: String
    - Name: AvailabilityZones
      Selector: "$.AutoScalingGroups[0].AvailabilityZones"
      Type: StringList
    - Name: InstanceIds
      Selector: "$..InstanceId"
      Type: StringList

# ---------------------------------------------------------------
# Using ASG information, select subnets / AZs to remove from ASG
# and subnets / AZs to keep in ASG. This also makes an API call
# because the selection logic is more readable than using SSM
# JSONPATH / JMESPATH selectors.
- name: SubnetSelector
  action: aws:executeScript
  onFailure: 'step:ExitList'
  onCancel: 'step:ExitList'
  timeoutSeconds: 60
  inputs:
    Runtime: "python3.6"
    Handler: "script_handler"
    InputPayload: 
      "vpcZoneIdentifier": "{{ DescribeAutoscaling.VPCZoneIdentifier }}"
      "affectAz": "{{ AvailabilityZone }}"
    Script: |
      import boto3
      client = boto3.client("ec2")
      def script_handler(events, context):
          asgSubnets = events.get("vpcZoneIdentifier","").split(",")
          affectAz = events.get("affectAz","")
          botoOut = client.describe_subnets(SubnetIds=asgSubnets).get("Subnets")
          affectSubnets  = [x["SubnetId"] for x in botoOut if x["AvailabilityZone"] == affectAz]
          protectSubnets = [x["SubnetId"] for x in botoOut if x["AvailabilityZone"] != affectAz]
          affectAzs      = [x["AvailabilityZone"] for x in botoOut if x["AvailabilityZone"] == affectAz]
          protectAzs     = [x["AvailabilityZone"] for x in botoOut if x["AvailabilityZone"] != affectAz]
          return { 
              "SubnetIdArray": asgSubnets,
              "AffectSubnetsArray":  affectSubnets,
              "ProtectSubnetsArray": protectSubnets,
              "ProtectVpcZoneIdentifier": ",".join(protectSubnets),
              "AffectAzsArray":      affectAzs,
              "ProtectAzsArray":     protectAzs,
          }      
  outputs:
    - Name: SubnetIds
      Selector: "$.Payload.SubnetIdArray"
      Type: StringList
    - Name: AffectSubnetsArray
      Selector: "$.Payload.AffectSubnetsArray"
      Type: StringList
    - Name: ProtectSubnetsArray
      Selector: "$.Payload.ProtectSubnetsArray"
      Type: StringList
    - Name: ProtectVpcZoneIdentifier
      Selector: "$.Payload.ProtectVpcZoneIdentifier"
      Type: String
    - Name: AffectAzsArray
      Selector: "$.Payload.AffectAzsArray"
      Type: StringList
    - Name: ProtectAzsArray
      Selector: "$.Payload.ProtectAzsArray"
      Type: StringList

# ---------------------------------------------------------------
# Remove subnets / AZs
- name: RemoveSubnets
  action: aws:executeAwsApi
  onFailure: 'step:Rollback'
  onCancel: 'step:Rollback'
  inputs:
    Service: autoscaling
    Api: UpdateAutoScalingGroup
    AutoScalingGroupName: "{{ AutoscalingGroupName }}"
    VPCZoneIdentifier: "{{ SubnetSelector.ProtectVpcZoneIdentifier }}"

# ---------------------------------------------------------------
# Wait in outage simulation state
- name: WaitForDuration
  action: 'aws:sleep'
  onFailure: 'step:Rollback'
  onCancel: 'step:Rollback'
  inputs:
    Duration: 'PT{{Duration}}M'

# ---------------------------------------------------------------
# Reset ASG subnets / AZs to original state before we started. 
- name: Rollback
  action: aws:executeAwsApi
  onFailure: 'step:ExitList'
  onCancel: 'step:ExitList'
  inputs:
    Service: autoscaling
    Api: UpdateAutoScalingGroup
    AutoScalingGroupName: "{{ AutoscalingGroupName }}"
    VPCZoneIdentifier: "{{ DescribeAutoscaling.VPCZoneIdentifier }}"

# ---------------------------------------------------------------
# List state of ASG after all is done. Hopefully it's the same as
# before we started. 
- name: ExitList
  action: aws:executeAwsApi
  timeoutSeconds: 60
  inputs:
    Service: autoscaling
    Api: DescribeAutoScalingGroups
    AutoScalingGroupNames:
        - "{{ AutoscalingGroupName }}"
  outputs:
    - Name: VPCZoneIdentifier
      Selector: "$.AutoScalingGroups[0].VPCZoneIdentifier"
      Type: String
    - Name: AvailabilityZones
      Selector: "$.AutoScalingGroups[0].AvailabilityZones"
      Type: StringList
    - Name: InstanceIds
      Selector: "$..InstanceId"
      Type: StringList
  isEnd: true

outputs:

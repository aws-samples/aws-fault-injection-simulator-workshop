AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Demonstrate the use of Step Functions to orchestrate FIS across accounts. This is the template for the account running Step Functions and targeting another account.

Parameters:
  AccountIdB:
    Type: String
    AllowedPattern: "[0-9]+"
    Description: Account that will be targeted by StepFunctions to orchestrate FIS
  AssumableRoleInAccountB:
    Type: String
    Description: IAM role to assume in remote account to run StepFunctions
  FisExecutionRoleInAccountB:
    Type: String
    Description: IAM role to use as execution role in FIS experiments created in remote account
  FisTemplateIdTrivialExecution:
    Type: String
    Description: FIS experiment template ID to execute in Step Functions run

Resources:
  StepFunctionsOrchestratorStateMachine1:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: assets/account-a-trigger-fis-1.json
      # Execution role in Account A
      Role: !GetAtt StepFunctionsOrchestratorStateMachineRole.Arn
      # Insert "${VARIABLE}" in statemachine code
      DefinitionSubstitutions:
        AssumableRoleInAccountB: !Ref AssumableRoleInAccountB
        FisExperimentToRun: !Ref FisTemplateIdTrivialExecution
        FisExperimentExecutionRole: !Ref FisExecutionRoleInAccountB
      # This is confusing but looks like policy mappings in step functions
      # Policies:
      #   - LambdaInvokePolicy:
      #       FunctionName: !Ref DataCheckingFunction
      #   - LambdaInvokePolicy:
      #       FunctionName: !Ref FlagApplicationFunction
      #   - LambdaInvokePolicy:
      #       FunctionName: !Ref ApproveApplicationFunction
      #   - LambdaInvokePolicy:
      #       FunctionName: !Ref RejectApplicationFunction

  StepFunctionsOrchestratorStateMachine2:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: assets/account-a-trigger-fis-2.json
      # Execution role in Account A
      Role: !GetAtt StepFunctionsOrchestratorStateMachineRole.Arn
      # Insert "${VARIABLE}" in statemachine code
      DefinitionSubstitutions:
        AssumableRoleInAccountB: !Ref AssumableRoleInAccountB
        FisExperimentToRun: !Ref FisTemplateIdTrivialExecution
        FisExperimentExecutionRole: !Ref FisExecutionRoleInAccountB

  StepFunctionsOrchestratorStateMachine3:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: assets/account-a-x-account.json
      # Execution role in Account A
      Role: !GetAtt StepFunctionsOrchestratorStateMachineRole.Arn
      # Insert "${VARIABLE}" in statemachine code
      DefinitionSubstitutions:
        # AssumableRoleInAccountB: !Ref AssumableRoleInAccountB
        # FisExperimentExecutionRole: !Ref FisExecutionRoleInAccountB

  FisWorkshopStepFunctionsFisExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - fis.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: FisExecutionRole
                Effect: Allow
                Action:
                  - fis:StartExperiment
                  - fis:TagResource
                Resource: "*"

  StepFunctionsOrchestratorStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # - Sid: AllowPassRole
              #   Effect: Allow
              #   Action: 
              #     - 'iam:PassRole'
              #   Resource: 
              #     # - 'arn:aws:iam::238810465798:role/FisStackAsg-FisInstanceRole21B642B7-10792LIF89MS0'
              #     - !GetAtt SpotChaosInstanceRole.Arn
              - Sid: AllowXrayTracing
                Effect: Allow
                Action: 
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: '*'
              - Sid: AllowAssumeRole
                Effect: Allow
                Action: sts:AssumeRole
                Resource: 
                  - !GetAtt FisWorkshopStepFunctionsFisExecutionRole.Arn
                  - !Ref AssumableRoleInAccountB


Outputs:
  StepFunction1:
    Description: "Step Function 1 - execute existing FIS experiment template in Account B"
    Value: !Ref StepFunctionsOrchestratorStateMachine1
  StepFunction2:
    Description: "Step Function 1 - execute existing FIS experiment template in Account B"
    Value: !Ref StepFunctionsOrchestratorStateMachine2
  StepFunction3:
    Description: "Step Function 1 - execute existing FIS experiment template in Account B"
    Value: !Ref StepFunctionsOrchestratorStateMachine3

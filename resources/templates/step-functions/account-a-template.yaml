AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Demonstrate the use of Step Functions to orchestrate FIS across accounts. This is the template for the account running Step Functions and targeting another account.

Parameters:
  AccountIdB:
    Type: String
    AllowedPattern: "[0-9]+"
    Description: Account that will be targeted by StepFunctions to orchestrate FIS
  AssumableRoleInAccountB:
    Type: String
    Description: IAM role to assume in remote account to run StepFunctions
  FisExecutionRoleInAccountB:
    Type: String
    Description: IAM role to use as execution role in FIS experiments created in remote account
  FisTemplateIdTrivialExecution:
    Type: String
    Description: FIS experiment template ID to execute in Step Functions run

Resources:
  StepFunctionsOrchestratorStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: assets/account-a-trigger-fis-1.json
      # Execution role in Account A
      Role: !GetAtt StepFunctionsOrchestratorStateMachineRole.Arn
      # Insert "${VARIABLE}" in statemachine code
      DefinitionSubstitutions:
        AssumableRoleInAccountB: !Ref AssumableRoleInAccountB
        FisExperimentToRun: !Ref FisTemplateIdTrivialExecution
        FisExperimentExecutionRole: !Ref FisExecutionRoleInAccountB
      # This is confusing but looks like policy mappings in step functions
      # Policies:
      #   - LambdaInvokePolicy:
      #       FunctionName: !Ref DataCheckingFunction
      #   - LambdaInvokePolicy:
      #       FunctionName: !Ref FlagApplicationFunction
      #   - LambdaInvokePolicy:
      #       FunctionName: !Ref ApproveApplicationFunction
      #   - LambdaInvokePolicy:
      #       FunctionName: !Ref RejectApplicationFunction

  StepFunctionsOrchestratorStateMachine2:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: assets/account-a-trigger-fis-2.json
      # Execution role in Account A
      Role: !GetAtt StepFunctionsOrchestratorStateMachineRole.Arn
      # Insert "${VARIABLE}" in statemachine code
      DefinitionSubstitutions:
        AssumableRoleInAccountB: !Ref AssumableRoleInAccountB
        FisExperimentToRun: !Ref FisTemplateIdTrivialExecution
        FisExperimentExecutionRole: !Ref FisExecutionRoleInAccountB

  StepFunctionsOrchestratorStateMachine3:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: assets/account-a-x-account.json
      # Execution role in Account A
      Role: !GetAtt StepFunctionsOrchestratorStateMachineRole.Arn
      # Insert "${VARIABLE}" in statemachine code
      DefinitionSubstitutions:
        # AssumableRoleInAccountB: !Ref AssumableRoleInAccountB
        # FisExperimentExecutionRole: !Ref FisExecutionRoleInAccountB

  FisWorkshopStepFunctionsFisExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - fis.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: FisExecutionRole
                Effect: Allow
                Action:
                  - fis:StartExperiment
                  - fis:TagResource
                Resource: "*"

  StepFunctionsOrchestratorStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # - Sid: AllowPassRole
              #   Effect: Allow
              #   Action: 
              #     - 'iam:PassRole'
              #   Resource: 
              #     # - 'arn:aws:iam::238810465798:role/FisStackAsg-FisInstanceRole21B642B7-10792LIF89MS0'
              #     - !GetAtt SpotChaosInstanceRole.Arn
              - Sid: AllowXrayTracing
                Effect: Allow
                Action: 
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: '*'
              - Sid: AllowAssumeRole
                Effect: Allow
                Action: sts:AssumeRole
                Resource: 
                  - !GetAtt FisWorkshopStepFunctionsFisExecutionRole.Arn
                  - !Ref AssumableRoleInAccountB
              # - Sid: AllowKmsRandomNumber
              #   Effect: Allow
              #   Action: 'kms:GenerateRandom'
              #   Resource: '*'
              # # Fix this if we generate a DDB
              # - Sid: AllowDdbAll
              #   Effect: Allow
              #   Action: 'dynamodb:*'
              #   Resource: !GetAtt FisSpotStates.Arn  
              # # Fix this to minimize permissions
              # - Sid: AllowSpot
              #   Effect: Allow
              #   Action: 
              #     - 'ec2:RequestSpotInstances'
              #     - 'ec2:DescribeSpotInstanceRequests'
              #   Resource: '*'
              # - Sid: AllowCreateServiceLinkedRole
              #   Effect: Allow
              #   Action: 
              #     - 'iam:CreateServiceLinkedRole'
              #   Resource: '*'
              # - Sid: AllowInstanceTagging
              #   Effect: Allow
              #   Action: 
              #     - 'tag:TagResources'
              #     - 'ec2:CreateTags'
              #   Resource: '*'
              # - Sid: AllowInstanceMetadataChange
              #   Effect: Allow
              #   Action: 
              #     - 'ec2:ModifyInstanceMetadataOptions'
              #   Resource: '*'
              # - Sid: AllowInstanceTermination
              #   Effect: Allow
              #   Action:
              #     - ec2:terminateInstances
              #   Resource: "*"
              #   Condition:
              #     StringEquals: 
              #       ec2:ResourceTag/Name: "Fis/Spot"
              # # Fix this to use the lambda ARN we generate
              # - Sid: AllowLambdaCallbacks
              #   Effect: Allow
              #   Action: 
              #     - 'lambda:InvokeFunction'
              #     - 'ec2:CreateTags'
              #   Resource: '*'




#   SpotChaosParameterCheckpointDuration:
#     Type: AWS::SSM::Parameter
#     Properties:
#       Name: FisWorkshopSpotCheckpointDuration
#       Type: String
#       Value: "2"
#       Description: Duration between checkopints in minutes (float)
#       AllowedPattern: ^[0-9]+(\.[0-9]+)?$

#   SpotChaosParameterJobDuration:
#     Type: AWS::SSM::Parameter
#     Properties:
#       Name: FisWorkshopSpotJobDuration
#       Type: String
#       Value: "6"
#       Description: Total job runtime in minutes (float)
#       AllowedPattern: ^[0-9]+(\.[0-9]+)?$


#   SpotChaosStateMachine:
#     Type: AWS::Serverless::StateMachine
#     Properties:
#       DefinitionUri: assets/spot-workflow.json
#       Role: !GetAtt SpotChaosStateMachineRole.Arn
#       # Insert "${VARIABLE}" in statemachine code
#       DefinitionSubstitutions:
#         SpotChaosInstanceProfileArn: !GetAtt SpotChaosInstanceProfile.Arn
#         SpotChaosInstanceArnPrefix: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/"
#         SpotChaosInstanceImageId: !Ref ImageId
#         SpotChaosInstanceSubnetId: !Ref SubnetId
#         # # Max 4k parameter size makes this a poor choice
#         # SpotChaosInstanceUserData: !Ref UserData
#         SpotChaosInstanceType: !Ref InstanceType
#         SpotChaosLambdaWaiter: !GetAtt SpotHeartbeatHandler.Arn
#         SpotChaosDynamoTableName: !Ref FisSpotStates
#       # This is confusing but looks like policy mappings in step functions
#       # Policies:
#       #   - LambdaInvokePolicy:
#       #       FunctionName: !Ref DataCheckingFunction
#       #   - LambdaInvokePolicy:
#       #       FunctionName: !Ref FlagApplicationFunction
#       #   - LambdaInvokePolicy:
#       #       FunctionName: !Ref ApproveApplicationFunction
#       #   - LambdaInvokePolicy:
#       #       FunctionName: !Ref RejectApplicationFunction

#   SpotChaosStateMachineRole:
#     Type: AWS::IAM::Role
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service:
#                 - states.amazonaws.com
#             Action:
#               - 'sts:AssumeRole'
#       Policies:
#         - PolicyName: root
#           PolicyDocument:
#             Version: "2012-10-17"
#             Statement:
#               - Sid: AllowXrayTracing
#                 Effect: Allow
#                 Action: 
#                   - xray:PutTraceSegments
#                   - xray:PutTelemetryRecords
#                   - xray:GetSamplingRules
#                   - xray:GetSamplingTargets
#                 Resource: '*'
#               - Sid: AllowKmsRandomNumber
#                 Effect: Allow
#                 Action: 'kms:GenerateRandom'
#                 Resource: '*'
#               # Fix this if we generate a DDB
#               - Sid: AllowDdbAll
#                 Effect: Allow
#                 Action: 'dynamodb:*'
#                 Resource: !GetAtt FisSpotStates.Arn  
#               # Fix this to minimize permissions
#               - Sid: AllowSpot
#                 Effect: Allow
#                 Action: 
#                   - 'ec2:RequestSpotInstances'
#                   - 'ec2:DescribeSpotInstanceRequests'
#                 Resource: '*'
#               - Sid: AllowCreateServiceLinkedRole
#                 Effect: Allow
#                 Action: 
#                   - 'iam:CreateServiceLinkedRole'
#                 Resource: '*'
#               - Sid: AllowPassRole
#                 Effect: Allow
#                 Action: 
#                   - 'iam:PassRole'
#                 Resource: 
#                   # - 'arn:aws:iam::238810465798:role/FisStackAsg-FisInstanceRole21B642B7-10792LIF89MS0'
#                   - !GetAtt SpotChaosInstanceRole.Arn
#               - Sid: AllowInstanceTagging
#                 Effect: Allow
#                 Action: 
#                   - 'tag:TagResources'
#                   - 'ec2:CreateTags'
#                 Resource: '*'
#               - Sid: AllowInstanceMetadataChange
#                 Effect: Allow
#                 Action: 
#                   - 'ec2:ModifyInstanceMetadataOptions'
#                 Resource: '*'
#               - Sid: AllowInstanceTermination
#                 Effect: Allow
#                 Action:
#                   - ec2:terminateInstances
#                 Resource: "*"
#                 Condition:
#                   StringEquals: 
#                     ec2:ResourceTag/Name: "Fis/Spot"
#               # Fix this to use the lambda ARN we generate
#               - Sid: AllowLambdaCallbacks
#                 Effect: Allow
#                 Action: 
#                   - 'lambda:InvokeFunction'
#                   - 'ec2:CreateTags'
#                 Resource: '*'

                
#   SpotChaosInstanceProfile:
#     Type: "AWS::IAM::InstanceProfile"
#     Properties: 
#       Roles: 
#         - !Ref SpotChaosInstanceRole

#   SpotChaosInstanceRole:
#     Type: AWS::IAM::Role
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service:
#                 - ec2.amazonaws.com
#             Action:
#               - 'sts:AssumeRole'
#       ManagedPolicyArns:
#         - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
#         - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
#       Policies:
#         - PolicyName: root
#           PolicyDocument:
#             Version: "2012-10-17"
#             Statement:
#               - Sid: SSMAccess
#                 Effect: Allow
#                 Action: 
#                   - secretsmanager:GetSecretValue
#                 Resource: '*'
#               - Sid: DDBAccess
#                 Effect: Allow
#                 Action: 
#                   - dynamodb:*
#                 Resource: !GetAtt FisSpotStates.Arn
#               - Sid: SFNAccess
#                 Effect: Allow
#                 Action: 
#                   - states:SendTaskHeartbeat 
#                   - states:SendTaskSuccess
#                   - states:SendTaskFailure
#                 Resource: '*'                
#               - Sid: AllowSelfTerminate
#                 Effect: Allow
#                 Action:
#                   - ec2:terminateInstances
#                 Resource: "*"
#                 Condition:
#                   StringEquals: 
#                     ec2:ResourceTag/Name: "Fis/Spot"

#   SpotDashboard:
#     Type: AWS::CloudWatch::Dashboard
#     Properties: 
#       DashboardName: !Sub "FisSpot-${AWS::Region}"
#       DashboardBody: !Sub '{"widgets":[{"type":"metric","x":0,"y":0,"width":24,"height":6,"properties":{"metrics":[["fisworkshop","checkpointed",{"color":"#2ca02c"}],[".","unsaved",{"color":"#d62728"}]],"view":"timeSeries","stacked":false,"region":"${AWS::Region}","stat":"Average","period":1,"start":"-PT15M","end":"P0D","title":"SpotMetrics"}}]}'

#   SpotHeartbeatHandler:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: FisHeartbeatHandler
#       CodeUri: assets/
#       Handler: lambda_waiter.lambda_handler
#       Runtime: python3.9
#       # # Maybe we should pass dynamoDB table name here ... 
#       # Environment:
#       #   Variables:
#       #     APPLICATIONS_TABLE_NAME: !Ref ApplicationsTable
#       Policies:
#         - AWSLambdaExecute
#         - Version: "2012-10-17"
#           Statement:
#             # Lock this down a bit
#             - Sid: DDBAccess
#               Effect: Allow
#               Action: 
#                 - dynamodb:*
#               Resource: !GetAtt FisSpotStates.Arn

#   FisSpotStates:
#     Type: 'AWS::DynamoDB::Table'
#     Properties:
#       TableName: !Ref DdbTableName
#       AttributeDefinitions:
#         -
#           AttributeName: RunId
#           AttributeType: S
#       KeySchema:
#         -
#           AttributeName: RunId
#           KeyType: HASH
#       BillingMode: PAY_PER_REQUEST

#   SpotFailureTest:
#     Type: AWS::FIS::ExperimentTemplate
#     Properties:
#       Description: Orchestrate spot failures
#       Tags:
#         Name: SpotFailureTest
#       Actions:
#         Wait1:
#           ActionId: aws:fis:wait
#           Parameters:
#             duration: PT1M
#         GracefulKill:
#           ActionId: aws:ec2:send-spot-instance-interruptions
#           Parameters:
#             durationBeforeInterruption: PT2M
#           Targets:
#             SpotInstances: AllFisSpotInstances
#           StartAfter:
#             - Wait1
#         Wait2:
#           ActionId: aws:fis:wait
#           Parameters:
#             duration: PT2M
#           StartAfter:
#             - GracefulKill
#         KillWithoutWarning:
#           ActionId: aws:ec2:terminate-instances
#           Parameters: {}
#           Targets:
#             Instances: AllSpotInstances2
#           StartAfter:
#             - Wait2
#       Targets:
#         AllFisSpotInstances:
#           ResourceType: aws:ec2:spot-instance
#           ResourceTags:
#             Name: Fis/Spot
#           Filters:
#             - Path: State.Name
#               Values:
#                 - running
#           SelectionMode: ALL
#         AllSpotInstances2:
#           ResourceType: aws:ec2:instance
#           ResourceTags:
#             Name: Fis/Spot
#           Filters:
#             - Path: State.Name
#               Values:
#                 - running
#           SelectionMode: ALL
#       StopConditions:
#         - Source: none
#       RoleArn: !GetAtt SpotChaosFisRole.Arn

#   SpotChaosFisRole:
#     Type: AWS::IAM::Role
#     Properties:
#       RoleName: FisWorkshopSpotRole
#       AssumeRolePolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service:
#                 - fis.amazonaws.com
#             Action:
#               - 'sts:AssumeRole'
#       ManagedPolicyArns:
#         - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
#         - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
#       Policies:
#         - PolicyName: root
#           PolicyDocument:
#             Version: '2012-10-17'
#             Statement:
#               - Sid: AllowFISExperimentRoleReadOnly
#                 Effect: Allow
#                 Action:
#                   - ec2:DescribeInstances
#                   - ecs:DescribeClusters
#                   - ecs:ListContainerInstances
#                   - eks:DescribeNodegroup
#                   - iam:ListRoles
#                   - rds:DescribeDBInstances
#                   - rds:DescribeDbClusters
#                   - ssm:ListCommands
#                 Resource: '*'
#               - Sid: AllowFISExperimentRoleEC2Actions
#                 Effect: Allow
#                 Action:
#                   - ec2:RebootInstances
#                   - ec2:StopInstances
#                   - ec2:StartInstances
#                   - ec2:TerminateInstances
#                 Resource: arn:aws:ec2:*:*:instance/*
#               - Sid: AllowSpotActions
#                 Effect: Allow
#                 Action: 
#                   - 'ec2:RequestSpotInstances'
#                   - 'ec2:DescribeSpotInstanceRequests'
#                   - 'ec2:SendSpotInstanceInterruptions'
#                 Resource: '*'


# # Outputs:
# #   SubmitApplicationFunctionArn:
# #     Description: "Submit Application Function ARN"
# #     Value: !GetAtt SubmitApplicationFunction.Arn
# #   FlagApplicationFunctionArn:
# #     Description: "Flag Application Function ARN"
# #     Value: !GetAtt FlagApplicationFunction.Arn
# #   FindApplicationsFunctionArn:
# #     Description: "Find Applications Function ARN"
# #     Value: !GetAtt FindApplicationsFunction.Arn
# #   ApproveApplicationFunctionArn:
# #     Description: "Approve Application Function ARN"
# #     Value: !GetAtt ApproveApplicationFunction.Arn
# #   RejectApplicationFunctionArn:
# #     Description: "Reject Application Function ARN"
# #     Value: !GetAtt RejectApplicationFunction.Arn
# #   DataCheckingFunctionArn:
# #     Description: "Data Checking Function ARN"
# #     Value: !GetAtt DataCheckingFunction.Arn


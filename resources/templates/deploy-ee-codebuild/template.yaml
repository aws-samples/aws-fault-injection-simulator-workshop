Resources:
  # FisWorkshopBuilderCustomResource:
  MyCustomResource:
    Type: 'Custom::CdkInstallWrapper'
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CustomResourceLambda}"
      CodeBuildProjectName: !Ref CodeBuildProject
      ForceUpdateParam: 1
  CustomResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt CustomLambdaRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          var aws = require('aws-sdk')
          var response = require('cfn-response')
          exports.handler = function(event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event))

              // For Delete requests, immediately send a SUCCESS response.\
              if (event.RequestType == "Delete") {
                  response.send(event, context, "SUCCESS")
                  return
              }

              // FIXME: this kicks off the codebuild but can't wait to finish because max lambda runtime is 15min. Maybe this should be wrapped into step functions?
              var codebuild = new aws.CodeBuild();
              var params={
                projectName: event.ResourceProperties.CodeBuildProjectName,
                environmentVariablesOverride: [
                  {
                    name: 'CUSTOM_RESOURCE_REQUEST',
                    value: event.RequestType.toLowerCase()
                  },
                  {
                    name: 'CUSTOM_RESOURCE_PHYSICAL_RESOURCE_ID',
                    value: event.PhysicalResourceId || context.logStreamName,
                  },
                  {
                    name: 'CUSTOM_RESOURCE_STACK_ID',
                    value: event.StackId
                  },
                  {
                    name: 'CUSTOM_RESOURCE_REQUEST_ID',
                    value: event.RequestId
                  },
                  {
                    name: 'CUSTOM_RESOURCE_LOGICAL_RESOURCE_ID',
                    value: event.LogicalResourceId
                  },
                  {
                    name: 'CUSTOM_RESOURCE_RESPONSE_URL',
                    value: event.ResponseURL
                  },
                  /* more items */
                ],
              };
              console.log("Parameters: " + JSON.stringify(params))
              codebuild.startBuild(params, function(err, data) {
                if (err) {
                  // an error occurred - tell CFN immediately
                  console.log(err, err.stack); 
                  response.send(event, context, "FAILED");
                } else {
                    // successfully started codpipeline
                    // success signal will come from CodeBuild job
                    console.log(data);           
                }
              });

              // Remove this ... we close the loop in CodeBuild
              //response.send(event, context, "SUCCESS")
              return
          }
      Description: Invoke codebuild for custom resource
      TracingConfig:
        Mode: Active
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        # Type: CODEPIPELINE
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        # By default codebuild doesn't allow docker in docker
        # There seems to be an option of running docker in docker
        # but is that a good idea ... ?
        # https://docs.aws.amazon.com/codebuild/latest/userguide/sample-docker-custom-image.html
        PrivilegedMode: True
        #
        # Image: aws/codebuild/ubuntu-base:14.04
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        # EnvironmentVariables:
        #   - Name: varName1
        #     Value: varValue1
        #   - Name: varName2
        #     Value: varValue2
        #     Type: PLAINTEXT
        #   - Name: varName3
        #     Value: /CodeBuild/testParameter
        #     Type: PARAMETER_STORE
      Source:
        # Type: CODEPIPELINE
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                # Install sudo and jq for our installers
                - yum install -y sudo jq
                # Update AWS CLI just in case
                - pip install --upgrade awscli
                ## - touch ~/.bashrc
                # Install / update node for CDK
                # https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html
                - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
                - export NVM_DIR="$HOME/.nvm"
                - '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"'
                - '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"'
                # CDK stuffs
                - npm install -g typescript
                - npm install -g aws-cdk
            build:
              commands:
                # Default outcome of build is FAILED
                - export CUSTOM_RESOURCE_STATUS=FAILED
                # Some debugging info 
                - env
                - env | grep CUSTOM_RESOURCE_
                - pwd
                - df -h
                - cdk --version
                - python --version
                - aws --version
                # Pull source - right now straight from github
                # For EE we may want to update this to use the S3 bucket to avoid performance issues
                - time git clone https://github.com/aws-samples/aws-fault-injection-simulator-workshop.git
                # Build and deploy via CDK
                - 'cd ${CODEBUILD_SRC_DIR}/aws-fault-injection-simulator-workshop/resources/templates && time ./deploy-parallel.sh $CUSTOM_RESOURCE_REQUEST'
                - 'cd ${CODEBUILD_SRC_DIR}/aws-fault-injection-simulator-workshop/resources/templates && for ii in deploy-output*.txt; do echo --- $ii --- ; cat $ii; done'
                # We didn't fail so reset build outcome to SUCCESS
                - export CUSTOM_RESOURCE_STATUS=SUCCESS
                - echo DONE
              finally:
                - echo DONE
                - "echo Returning build status to custom resource: $CUSTOM_RESOURCE_STATUS"
                - "curl  -H 'Content-Type: ''' -X PUT -d '{ \"Status\": \"'${CUSTOM_RESOURCE_STATUS}'\", \"PhysicalResourceId\": \"'${CUSTOM_RESOURCE_PHYSICAL_RESOURCE_ID}'\", \"StackId\": \"'${CUSTOM_RESOURCE_STACK_ID}'\", \"RequestId\": \"'${CUSTOM_RESOURCE_REQUEST_ID}'\", \"LogicalResourceId\": \"'${CUSTOM_RESOURCE_LOGICAL_RESOURCE_ID}'\" }' ${CUSTOM_RESOURCE_RESPONSE_URL}"
  
      TimeoutInMinutes: 60
      # VpcConfig:
      #   VpcId: !Ref CodeBuildVPC
      #   Subnets: [!Ref CodeBuildSubnet]
      #   SecurityGroupIds: [!Ref CodeBuildSecurityGroup]
      # Cache:
      #   Type: S3
      #   Location: mybucket/prefix
  CustomLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      # Policies:
      #   - PolicyName: CodeBuildAccess
      #     PolicyDocument:
      #       Version: '2012-10-17'
      #       Statement:
      #         - Action:
      #           - 'logs:*'
      #           - 'ec2:CreateNetworkInterface'
      #           - 'ec2:DescribeNetworkInterfaces'
      #           - 'ec2:DeleteNetworkInterface'
      #           - 'ec2:DescribeSubnets'
      #           - 'ec2:DescribeSecurityGroups'
      #           - 'ec2:DescribeDhcpOptions'
      #           - 'ec2:DescribeVpcs'
      #           - 'ec2:CreateNetworkInterfacePermission'
      #           Effect: Allow
      #           Resource: '*'
  # CodeBuildVPC:
  #   Type: AWS::EC2::VPC
  #   Properties:
  #     CidrBlock: 10.0.0.0/16
  #     EnableDnsSupport: 'true'
  #     EnableDnsHostnames: 'true'
  #     Tags:
  #       - Key: name
  #         Value: codebuild
  # CodeBuildSubnet:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId:
  #       Ref: CodeBuildVPC
  #     CidrBlock: 10.0.1.0/24
  # CodeBuildSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupName: Codebuild Internet Group
  #     GroupDescription: 'CodeBuild SecurityGroup'
  #     VpcId: !Ref CodeBuildVPC